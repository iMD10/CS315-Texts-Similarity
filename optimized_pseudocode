OPTIMIZED_JACCARD_SIMILARITY(text1, text2)
    words1 ← SPLIT(LOWERCASE(text1))
    words2 ← SPLIT(LOWERCASE(text2))

    word_count1 ← DICTIONARY()
    word_count2 ← DICTIONARY()

    FOR word IN words1 DO
        IF word ∈ word_count1 THEN
            word_count1[word] ← word_count1[word] + 1
        ELSE
            word_count1[word] ← 1
        END IF
    END FOR

    FOR word IN words2 DO
        IF word ∈ word_count2 THEN
            word_count2[word] ← word_count2[word] + 1
        ELSE
            word_count2[word] ← 1
        END IF
    END FOR

    intersection_count ← 0
    union_count ← SIZE(word_count1) + SIZE(word_count2)

    FOR word IN word_count1 DO
        IF word ∈ word_count2 THEN
            intersection_count ← intersection_count + 1
            union_count ← union_count - 1
        END IF
    END FOR

    IF union_count = 0 THEN
        RETURN 0.0
    END IF

    RETURN intersection_count / union_count