FUNCTION jaccard_similarity_naive(words1, words2)
    // Initialize an empty list for the intersection of words
    INITIALIZE intersection as an empty list  
    
    // Initialize an empty list for the union of words
    INITIALIZE union as an empty list  

    // Iterate through each word in the first list
    FOR each word IN words1 DO  
        // Add the word to the union, ensuring uniqueness
        INITIALIZE found as FALSE  // Track if the word is already in the union
        FOR each item IN union DO  
            IF item IS equal to word THEN  
                SET found to TRUE  // Mark as found
                BREAK  // Exit the loop since we found the word
            ENDIF
        END FOR
        
        // If the word was not found in the union, add it
        IF found IS FALSE THEN  
            ADD word to union  
        ENDIF
        
        // Check if the word is present in the second list
        INITIALIZE presentInSecondList as FALSE  // Track presence in words2
        FOR each item IN words2 DO  
            IF item IS equal to word THEN  
                SET presentInSecondList to TRUE  // Mark as present
                BREAK  // Exit the loop since we found the word
            ENDIF
        END FOR
        
        // If the word is present in the second list and not already in the intersection
        INITIALIZE inIntersection as FALSE  // Track if the word is already in the intersection
        FOR each item IN intersection DO  
            IF item IS equal to word THEN  
                SET inIntersection to TRUE  // Mark as in the intersection
                BREAK  // Exit the loop since we found the word
            ENDIF
        END FOR
        
        // If the word is in the second list and not in the intersection, add it
        IF presentInSecondList IS TRUE AND inIntersection IS FALSE THEN  
            ADD word to intersection  
        ENDIF
    END FOR

    // Iterate through each word in the second list
    FOR each word IN words2 DO  
        // Add the word to the union, ensuring uniqueness
        INITIALIZE found as FALSE  // Track if the word is already in the union
        FOR each item IN union DO  
            IF item IS equal to word THEN  
                SET found to TRUE  // Mark as found
                BREAK  // Exit the loop since we found the word
            ENDIF
        END FOR
        
        // If the word was not found in the union, add it
        IF found IS FALSE THEN  
            ADD word to union  
        ENDIF
    END FOR

    // Calculate Jaccard similarity
    IF LENGTH(union) IS greater than 0 THEN  
        // Calculate similarity as the ratio of intersection size to union size
        SET similarity = LENGTH(intersection) / LENGTH(union)  
    ELSE  
        // If the union is empty, set similarity to 0.0 to avoid division by zero
        SET similarity = 0.0  
    ENDIF

    // Return the calculated similarity
    RETURN similarity  